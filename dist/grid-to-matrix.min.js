!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):e.gridToMatrix=r()}(this,function(){function e(r,t,o){if(null!==r){var n,i,u,a,f,c,s,l,g,y,p=0,d=0,h=r.type,m="FeatureCollection"===h,w="Feature"===h,v=m?r.features.length:1;for(n=0;n<v;n++){var E=0;for(s=(y=!!(g=m?r.features[n].geometry:w?r.geometry:r)&&"GeometryCollection"===g.type)?g.geometries.length:1,i=0;i<s;i++)if(null!==(c=y?g.geometries[i]:g)){l=c.coordinates;var b=c.type;switch(p=!o||"Polygon"!==b&&"MultiPolygon"!==b?0:1,b){case null:break;case"Point":t(l,d,n,E),d++,E++;break;case"LineString":case"MultiPoint":for(u=0;u<l.length;u++)t(l[u],d,n,E),d++,E++;break;case"Polygon":case"MultiLineString":for(u=0;u<l.length;u++)for(a=0;a<l[u].length-p;a++)t(l[u][a],d,n,E),d++,E++;break;case"MultiPolygon":for(u=0;u<l.length;u++)for(a=0;a<l[u].length;a++)for(f=0;f<l[u][a].length-p;f++)t(l[u][a][f],d,n,E),d++,E++;break;case"GeometryCollection":for(u=0;u<c.geometries.length;u++)e(c.geometries[u],t,o);break;default:throw new Error("Unknown Geometry Type")}}}}}function r(r,t,o,n){var i=o;return e(r,function(e,r,n,u){i=0===r&&void 0===o?e:t(i,e,r,n,u)},n),i}function t(e,r){var t;switch(e.type){case"FeatureCollection":for(t=0;t<e.features.length;t++)r(e.features[t].properties,t);break;case"Feature":r(e.properties,0)}}function o(e,r){if("Feature"===e.type)r(e,0);else if("FeatureCollection"===e.type)for(var t=0;t<e.features.length;t++)r(e.features[t],t)}function n(e,r){var t,o,n,i,u,a,f,c,s=0,l="FeatureCollection"===e.type,g="Feature"===e.type,y=l?e.features.length:1;for(t=0;t<y;t++)for(a=l?e.features[t].geometry:g?e.geometry:e,c=l?e.features[t].properties:g?e.properties:{},u=(f=!!a&&"GeometryCollection"===a.type)?a.geometries.length:1,n=0;n<u;n++)if(null!==(i=f?a.geometries[n]:a))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":r(i,s,c),s++;break;case"GeometryCollection":for(o=0;o<i.geometries.length;o++)r(i.geometries[o],s,c),s++;break;default:throw new Error("Unknown Geometry Type")}else r(null,s,c),s++}function i(e,r){n(e,function(e,t,o){var n=null===e?null:e.type;switch(n){case null:case"Point":case"LineString":case"Polygon":return void r(a(e,o),t,0)}var i;switch(n){case"MultiPoint":i="Point";break;case"MultiLineString":i="LineString";break;case"MultiPolygon":i="Polygon"}e.coordinates.forEach(function(e,n){r(a({type:i,coordinates:e},o),t,n)})})}function u(e,t){i(e,function(e,o){var n=0;if(e.geometry){var i=e.geometry.type;"Point"!==i&&"MultiPoint"!==i&&r(e,function(r,i){var u=f([r,i],e.properties);return t(u,o,n),n++,i})}})}function a(e,r){if(void 0===e)throw new Error("No geometry passed");return{type:"Feature",properties:r||{},geometry:e}}function f(e,r){if(!e)throw new Error("No coordinates passed");if(e.length<2)throw new Error("Coordinates must be an array of two or more positions");return{type:"Feature",properties:r||{},geometry:{type:"LineString",coordinates:e}}}function c(e,r){if(!e)throw new Error("geojson is required");var t=e.geometry?e.geometry.type:e.type;if(!t)throw new Error("invalid geojson");if("FeatureCollection"===t)throw new Error("FeatureCollection is not supported");if("GeometryCollection"===t)throw new Error("GeometryCollection is not supported");var o=e.geometry?e.geometry.coordinates:e.coordinates;if(!o)throw new Error("geojson must contain coordinates");switch(t){case"LineString":return void r(o,0,0);case"Polygon":case"MultiLineString":for(var n=0,i=0;i<o.length;i++)"MultiLineString"===t&&(n=i),r(o[i],i,n);return;case"MultiPolygon":for(var u=0;u<o.length;u++)for(var a=0;a<o[u].length;a++)r(o[u][a],a,u);return;default:throw new Error(t+" geometry not supported")}}function s(e){if(!e)throw new Error("obj is required");var r;if(e.length?r=e:e.coordinates?r=e.coordinates:e.geometry&&e.geometry.coordinates&&(r=e.geometry.coordinates),r)return l(r),r;throw new Error("No valid coordinates")}function l(e){if(e.length>1&&"number"==typeof e[0]&&"number"==typeof e[1])return!0;if(Array.isArray(e[0])&&e[0].length)return l(e[0]);throw new Error("coordinates must only contain numbers")}function g(e){if(!e)throw new Error("geojson is required");if(void 0!==e.geometry)return e.geometry;if(e.coordinates||e.geometries)return e;throw new Error("geojson must be a valid Feature or Geometry Object")}function y(e,r){var t={};return m(e,function(e){var r=h(e)[1];t[r]||(t[r]=[]),t[r].push(e)}),Object.keys(t).map(function(e){return t[e].sort(function(e,r){return h(e)[0]-h(r)[0]})}).sort(function(e,t){return r?h(e[0])[1]-h(t[0])[1]:h(t[0])[1]-h(e[0])[1]})}var p={coordEach:e,coordReduce:r,propEach:t,propReduce:function(e,r,o){var n=o;return t(e,function(e,t){n=0===t&&void 0===o?e:r(n,e,t)}),n},featureEach:o,featureReduce:function(e,r,t){var n=t;return o(e,function(e,o){n=0===o&&void 0===t?e:r(n,e,o)}),n},coordAll:function(r){var t=[];return e(r,function(e){t.push(e)}),t},geomEach:n,geomReduce:function(e,r,t){var o=t;return n(e,function(e,n,i){o=0===n&&void 0===t?e:r(o,e,n,i)}),o},flattenEach:i,flattenReduce:function(e,r,t){var o=t;return i(e,function(e,n,i){o=0===n&&0===i&&void 0===t?e:r(o,e,n,i)}),o},segmentEach:u,segmentReduce:function(e,r,t){var o=t;return u(e,function(e,n,i){o=0===n&&void 0===t?e:r(o,e,n,i)}),o},lineEach:c,lineReduce:function(e,r,t){var o=t;return c(e,function(e,n,i){o=0===n&&void 0===t?e:r(o,e,n,i)}),o}},d={geojsonType:function(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)},collectionOf:function(e,r,t){if(!e)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<e.features.length;o++){var n=e.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}},featureOf:function(e,r,t){if(!e)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)},getCoord:function(e){if(!e)throw new Error("obj is required");var r=s(e);if(r.length>1&&"number"==typeof r[0]&&"number"==typeof r[1])return r;throw new Error("Coordinate is not a valid Point")},getCoords:s,containsNumber:l,getGeom:g,getGeomType:function(e){if(!e)throw new Error("geojson is required");var r=g(e);if(r)return r.type}},h=d.getCoords,m=p.featureEach,w=d.collectionOf;return function(e,r,t,o){w(e,"Point","input must contain Points"),r=r||"elevation";for(var n=y(e,t),i=[],u=0;u<n.length;u++){for(var a=n[u],f=[],c=0;c<a.length;c++){var s=a[c];s.properties[r]?f.push(s.properties[r]):f.push(0),!0===o&&(s.properties.matrixPosition=[u,c])}i.push(f)}return i}});
